#
# Serial Studio - https://github.com/alex-spataru/serial-studio
#
# Copyright (C) 2020-2025 Alex Spataru <https://aspatru.com>
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE. See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program. If not, see <https://www.gnu.org/licenses/>.
#
# SPDX-License-Identifier: GPL-3.0-or-later
#

#-------------------------------------------------------------------------------
# Workflow configuration
#-------------------------------------------------------------------------------

name: Deploy

on:
  push:               # Run on push
    paths-ignore:     # File patterns to ignore
    - '**.md'         # Ignore changes to *.md files

  pull_request:       # Run on pull-request
    paths-ignore:     # File-patterns to ignore
    - '**.md'         # Ignore changes to *.md files

#-------------------------------------------------------------------------------
# Define application name & version
#-------------------------------------------------------------------------------

env:
  VERSION: "3.0.6"
  QT_VERSION_LINUX: 6.9.0
  QT_VERSION_MACOS: 6.9.0
  QT_VERSION_WINDOWS: 6.9.0
  EXECUTABLE: "Serial-Studio"
  APPLICATION: "Serial Studio"
  UNIXNAME: "serial-studio"
  QML_DIR: "../../app/qml"
  PUBLISHER: "Alex Spataru"
  QTFRAMEWORK_BYPASS_LICENSE_CHECK: "true"
  DESCRIPTION: "Multi-purpose serial data visualization & processing program"
    
#-------------------------------------------------------------------------------
# Begin workflow jobs definition
#-------------------------------------------------------------------------------

jobs:

#-------------------------------------------------------------------------------
# GNU/Linux build (x86_64)
#-------------------------------------------------------------------------------

  build-linux-x86_64:
    runs-on: ubuntu-22.04
    name: '🐧 Linux (x86_64)'
    steps:
    - name: '🧰 Checkout'
      uses: actions/checkout@v4
      
    - name: '⚙️ Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          fakeroot \
          libcups2-dev \
          libegl1 \
          libfuse2 \
          libgl1-mesa-dev \
          libgstreamer-gl1.0-0 \
          libpulse-dev \
          libssl-dev \
          libudev-dev \
          libzstd-dev \
          rpm \
          libxcb1 \
          libxcb-cursor0 \
          libxcb-cursor-dev \
          libxcb-glx0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-image0-dev \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render0 \
          libxcb-render-util0 \
          libxcb-shape0 \
          libxcb-shm0 \
          libxcb-sync1 \
          libxcb-util0-dev \
          libxcb-util1 \
          libxcb-xfixes0 \
          libxcb-xinerama0 \
          libxcb-xkb-dev \
          libxcb-xtest0 \
          libxkbcommon-dev \
          libxkbcommon-x11-0 \
          libxkbcommon-x11-dev

    - name: '⚙️ Restore Qt Cache'
      uses: actions/cache/restore@v3
      with:
        path: |
          ${{github.workspace}}/Qt-${{env.QT_VERSION_LINUX}}-${{runner.os}}-x64
          ${{env.USERPROFILE}}/.qt-license
        key: qt-${{runner.os}}-${{env.QT_VERSION_LINUX}}-x64-v1

    - name: '⚙️ Install Qt'
      shell: bash
      env:
        QT_VERSION: ${{env.QT_VERSION_LINUX}}
        QT_ARCH: x64
        QT_USERNAME: ${{secrets.QT_USERNAME}}
        QT_PASSWORD: ${{secrets.QT_PASSWORD}}
        QT_OUTPUT_DIR: ${{github.workspace}}/Qt-${{env.QT_VERSION_LINUX}}-${{runner.os}}-x64

      run: |
        # Run the install script
        chmod +x ./scripts/install-qt.sh
        ./scripts/install-qt.sh
        echo "QT_INSTALL_NEEDED=$QT_INSTALL_NEEDED" >> $GITHUB_ENV

        # Add to PATH
        export QT_BIN_PATH="${QT_OUTPUT_DIR}/${QT_VERSION}/gcc_64/bin"
        export QT_LIBEXEC_PATH="${QT_OUTPUT_DIR}/${QT_VERSION}/gcc_64/libexec"
        export CMAKE_PREFIX_PATH="${QT_OUTPUT_DIR}/${QT_VERSION}/gcc_64/lib/cmake"

        # Write to GithHub path too
        echo "$QT_BIN_PATH" >> $GITHUB_PATH
        echo "$QT_LIBEXEC_PATH" >> $GITHUB_PATH
        echo "CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

    - name: '⚙️ Save Qt Cache'
      if: env.QT_INSTALL_NEEDED == 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          ${{github.workspace}}/Qt-${{env.QT_VERSION_LINUX}}-${{runner.os}}-x64
          ${{env.USERPROFILE}}/.qt-license
        key: qt-${{runner.os}}-${{env.QT_VERSION_LINUX}}-x64-v1
        
    - name: '⚙️ Install CMake'
      uses: lukka/get-cmake@latest
      with:
        useLocalCache: true

    - name: '🚧 Configure with CMake'
      run: |
        mkdir build
        cd build
        cmake ../ -DPRODUCTION_OPTIMIZATION=ON -DCMAKE_BUILD_TYPE=Release

    - name: '🚧 Build application'
      run: |
        cd build
        cmake --build . --config Release -j 16

    - name: '📦 Create AppImage'
      run: |
        cd "build/app"
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-x86_64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-x86_64.AppImage
        chmod +x linuxdeploy-x86_64.AppImage
        chmod +x linuxdeploy-plugin-qt-x86_64.AppImage
        
        export QML_SOURCES_PATHS="${{env.QML_DIR}}"
        
        ./linuxdeploy-x86_64.AppImage --appdir AppDir -e ${{env.UNIXNAME}} -i ../../app/deploy/linux/${{env.UNIXNAME}}.svg -d ../../app/deploy/linux/${{env.UNIXNAME}}.desktop --plugin qt --output appimage
        
        rm linuxdeploy-x86_64.AppImage
        rm linuxdeploy-plugin-qt-x86_64.AppImage
        
        mv *.AppImage ../../${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.AppImage

    - name: '📦 Create Native Packages'
      run: |
        cd "build/app"

        export LDNP_DESCRIPTION="${{env.DESCRIPTION}}"
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-native_packages/releases/download/continuous/linuxdeploy-plugin-native_packages-x86_64.AppImage
        chmod +x linuxdeploy-plugin-native_packages-x86_64.AppImage
        
        fakeroot ./linuxdeploy-plugin-native_packages-x86_64.AppImage --appdir AppDir --build deb
        #fakeroot ./linuxdeploy-plugin-native_packages-x86_64.AppImage --appdir AppDir --build rpm
        
        rm -rf AppDir
        rm linuxdeploy-plugin-native_packages-x86_64.AppImage
        
        mv *.deb ../../${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.deb
        #mv *.rpm ../../${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.rpm
          
    - name: '📤 Upload artifact: AppImage'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.AppImage
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.AppImage

    - name: '📤 Upload artifact: Debian Package'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.deb
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.deb

    #- name: '📤 Upload artifact: RPM Package'
    #  uses: actions/upload-artifact@v4
    #  with:
    #    name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.rpm
    #    path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-x86_64.rpm

#-------------------------------------------------------------------------------
# GNU/Linux build (aarch64)
#-------------------------------------------------------------------------------

  build-linux-aarch64:
    runs-on: ubuntu-22.04-arm
    name: '🐧 Linux (aarch64)'
    steps:
    - name: '🧰 Checkout'
      uses: actions/checkout@v4

    - name: '⚙️ Install dependencies'
      run: |
        sudo apt-get update
        sudo apt-get install -y \
          build-essential \
          fakeroot \
          libcups2-dev \
          libegl1 \
          libfuse2 \
          libgl1-mesa-dev \
          libgstreamer-gl1.0-0 \
          libpulse-dev \
          libssl-dev \
          libudev-dev \
          libzstd-dev \
          rpm \
          libxcb1 \
          libxcb-cursor0 \
          libxcb-cursor-dev \
          libxcb-glx0 \
          libxcb-icccm4 \
          libxcb-image0 \
          libxcb-image0-dev \
          libxcb-keysyms1 \
          libxcb-randr0 \
          libxcb-render0 \
          libxcb-render-util0 \
          libxcb-shape0 \
          libxcb-shm0 \
          libxcb-sync1 \
          libxcb-util0-dev \
          libxcb-util1 \
          libxcb-xfixes0 \
          libxcb-xinerama0 \
          libxcb-xkb-dev \
          libxcb-xtest0 \
          libxkbcommon-dev \
          libxkbcommon-x11-0 \
          libxkbcommon-x11-dev

    - name: '⚙️ Restore Qt Cache'
      uses: actions/cache/restore@v3
      with:
        path: |
          ${{github.workspace}}/Qt-${{env.QT_VERSION_LINUX}}-${{runner.os}}-arm64
        key: qt-${{runner.os}}-${{env.QT_VERSION_LINUX}}-arm64-v1

    - name: '⚙️ Install Qt'
      shell: bash
      env:
        QT_VERSION: ${{env.QT_VERSION_LINUX}}
        QT_ARCH: arm64
        QT_USERNAME: ${{secrets.QT_USERNAME}}
        QT_PASSWORD: ${{secrets.QT_PASSWORD}}
        QT_OUTPUT_DIR: ${{github.workspace}}/Qt-${{env.QT_VERSION_LINUX}}-${{runner.os}}-arm64
      run: |
        chmod +x ./scripts/install-qt.sh
        ./scripts/install-qt.sh
        echo "QT_INSTALL_NEEDED=$QT_INSTALL_NEEDED" >> $GITHUB_ENV

        export QT_BIN_PATH="${QT_OUTPUT_DIR}/${QT_VERSION}/gcc_64/bin"
        export QT_LIBEXEC_PATH="${QT_OUTPUT_DIR}/${QT_VERSION}/gcc_64/libexec"
        export CMAKE_PREFIX_PATH="${QT_OUTPUT_DIR}/${QT_VERSION}/gcc_64/lib/cmake"

        echo "$QT_BIN_PATH" >> $GITHUB_PATH
        echo "$QT_LIBEXEC_PATH" >> $GITHUB_PATH
        echo "CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

    - name: '⚙️ Save Qt Cache'
      if: env.QT_INSTALL_NEEDED == 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          ${{github.workspace}}/Qt-${{env.QT_VERSION_LINUX}}-${{runner.os}}-arm64
        key: qt-${{runner.os}}-${{env.QT_VERSION_LINUX}}-arm64-v1

    - name: '⚙️ Install CMake'
      uses: lukka/get-cmake@latest
      with:
        useLocalCache: true

    - name: '🚧 Configure with CMake'
      run: |
        mkdir build
        cd build
        cmake ../ -DPRODUCTION_OPTIMIZATION=ON -DCMAKE_BUILD_TYPE=Release

    - name: '🚧 Build application'
      run: |
        cd build
        cmake --build . --config Release -j 16

    - name: '📦 Create AppImage'
      run: |
        cd "build/app"
        wget https://github.com/linuxdeploy/linuxdeploy/releases/download/continuous/linuxdeploy-aarch64.AppImage
        wget https://github.com/linuxdeploy/linuxdeploy-plugin-qt/releases/download/continuous/linuxdeploy-plugin-qt-aarch64.AppImage
        chmod +x linuxdeploy-aarch64.AppImage
        chmod +x linuxdeploy-plugin-qt-aarch64.AppImage

        export QML_SOURCES_PATHS="${{env.QML_DIR}}"

        ./linuxdeploy-aarch64.AppImage --appdir AppDir -e ${{env.UNIXNAME}} -i ../../app/deploy/linux/${{env.UNIXNAME}}.svg -d ../../app/deploy/linux/${{env.UNIXNAME}}.desktop --plugin qt --output appimage

        rm linuxdeploy-aarch64.AppImage
        rm linuxdeploy-plugin-qt-aarch64.AppImage

        mv *.AppImage ../../${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-aarch64.AppImage

    - name: '📤 Upload artifact: AppImage'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-aarch64.AppImage
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Linux-aarch64.AppImage

#-------------------------------------------------------------------------------
# macOS build (aarch64 and x86_64)
#-------------------------------------------------------------------------------

  build-mac-universal:
    runs-on: macos-latest
    name: '🍎 macOS (Universal)'
    steps:
    - name: '🧰 Checkout'
      uses: actions/checkout@v4

    - name: '⚙️ Restore Qt Cache'
      uses: actions/cache/restore@v3
      with:
        path: |
          ${{github.workspace}}/Qt-${{env.QT_VERSION_MACOS}}-${{runner.os}}-x64
          ${{env.USERPROFILE}}/.qt-license
        key: qt-${{runner.os}}-${{env.QT_VERSION_MACOS}}-x64-v1

    - name: '⚙️ Install Qt'
      shell: bash
      env:
        QT_VERSION: ${{env.QT_VERSION_MACOS}}
        QT_ARCH: x64
        QT_USERNAME: ${{secrets.QT_USERNAME}}
        QT_PASSWORD: ${{secrets.QT_PASSWORD}}
        QT_OUTPUT_DIR: ${{github.workspace}}/Qt-${{env.QT_VERSION_MACOS}}-${{runner.os}}-x64
      run: |
        # Run the install script
        chmod +x ./scripts/install-qt.sh
        ./scripts/install-qt.sh
        echo "QT_INSTALL_NEEDED=$QT_INSTALL_NEEDED" >> $GITHUB_ENV

        # Add to PATH
        export QT_BIN_PATH="${QT_OUTPUT_DIR}/${QT_VERSION}/macos/bin"
        export QT_LIBEXEC_PATH="${QT_OUTPUT_DIR}/${QT_VERSION}/macos/libexec"
        export CMAKE_PREFIX_PATH="${QT_OUTPUT_DIR}/${QT_VERSION}/macos/lib/cmake"

        # Write to GithHub path too
        echo "$QT_BIN_PATH" >> $GITHUB_PATH
        echo "$QT_LIBEXEC_PATH" >> $GITHUB_PATH
        echo "CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" >> $GITHUB_ENV

    - name: '⚙️ Save Qt Cache'
      if: env.QT_INSTALL_NEEDED == 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          ${{github.workspace}}/Qt-${{env.QT_VERSION_MACOS}}-${{runner.os}}-x64
          ${{env.USERPROFILE}}/.qt-license
        key: qt-${{runner.os}}-${{env.QT_VERSION_MACOS}}-x64-v1

    - name: '⚙️ Install CMake'
      uses: lukka/get-cmake@latest
      with:
        useLocalCache: true

    - name: '⚙️ Install Node'
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: '🚧 Configure with CMake'
      run: |
        mkdir build
        cd build
        cmake ../ -DPRODUCTION_OPTIMIZATION=ON -DCMAKE_BUILD_TYPE=Release -DCMAKE_OSX_DEPLOYMENT_TARGET=12.0 -DCMAKE_OSX_ARCHITECTURES="arm64;x86_64"

    - name: '🚧 Build application'
      run: |
        cd build
        cmake --build . --config Release -j 16

    - name: '📦 Package application'
      run: |
        cd build
        cpack --verbose

    - name: '🪪 Import Certificates'
      uses: alex-spataru/import-codesign-certs@v4
      with:
        p12-file-base64: ${{secrets.APPLE_CERTIFICATES_P12}}
        p12-password: ${{secrets.APPLE_CERTIFICATES_P12_PASSWORD}}

    - name: '💿 Mount DMG and copy application'
      run: |
        VOLUME=$(yes | hdiutil attach ./build/*.dmg -nobrowse | grep "Volumes" | awk '{print $3}')
        cp -a "$VOLUME/${{env.EXECUTABLE}}.app" "${{env.APPLICATION}}.app"
        hdiutil detach "$VOLUME"

    - name: '✍🏻 Sign Application'
      run: codesign --force --deep --options runtime --sign "${{secrets.APPLE_APPID_TEAM_ID}}" "${{env.APPLICATION}}.app"
        
    - name: '💽 Create nice DMG'
      run: |
        npm install --global create-dmg
        rm LICENSE.md
        create-dmg "${{env.APPLICATION}}.app" --dmg-title="${{env.APPLICATION}}"
        mv "${{env.APPLICATION}} ${{env.VERSION}}.dmg" "${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg"

    - name: '📋 Notarize'
      uses: wpilibsuite/xcode-notarize@v3
      with:
        product-path: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg
        appstore-connect-username: ${{secrets.APPLE_NOTARIZATION_USERNAME}}
        appstore-connect-teamid: ${{secrets.APPLE_NOTARIZATION_TEAMID}}
        appstore-connect-password: ${{secrets.APPLE_NOTARIZATION_PASSWORD}}

    - name: '📌 Staple'
      uses: BoundfoxStudios/action-xcode-staple@v1
      with:
        product-path: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg

    - name: '📤 Upload artifact: DMG'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-macOS-Universal.dmg

#-------------------------------------------------------------------------------
# Windows build (MSVC 2022 x86_64)
#-------------------------------------------------------------------------------

  build-windows-x86_64:
    runs-on: windows-latest
    name: '🧊 Windows (x86_64)'      
    steps:
    - run: git config --global core.autocrlf input
    - name: '🧰 Checkout'
      uses: actions/checkout@v4

    - name: '⚙️ Restore Qt Cache'
      uses: actions/cache/restore@v3
      with:
        path: |
          ${{github.workspace}}/Qt-${{env.QT_VERSION_WINDOWS}}-${{runner.os}}-x64
          ${{env.USERPROFILE}}/.qt-license
        key: qt-${{runner.os}}-${{env.QT_VERSION_WINDOWS}}-x64-msvc2022

    - name: '⚙️ Install Qt'
      shell: pwsh
      env:
        QT_VERSION: ${{env.QT_VERSION_WINDOWS}}
        QT_ARCH: x64
        QT_USERNAME: ${{secrets.QT_USERNAME}}
        QT_PASSWORD: ${{secrets.QT_PASSWORD}}
        QT_OUTPUT_DIR: ${{github.workspace}}/Qt-${{env.QT_VERSION_WINDOWS}}-${{runner.os}}-x64
      run: |
        # Run the installer
        ./scripts/install-qt.ps1
        echo "QT_INSTALL_NEEDED=$env:QT_INSTALL_NEEDED" | Out-File -FilePath $env:GITHUB_ENV -Encoding utf8 -Append

        # Add to PATH
        $QT_BIN_PATH = "$env:QT_OUTPUT_DIR\$env:QT_VERSION\msvc2022_64\bin"
        $QT_LIBEXEC_PATH = "$env:QT_OUTPUT_DIR\$env:QT_VERSION\msvc2022_64\libexec"
        $CMAKE_PREFIX_PATH = "$env:QT_OUTPUT_DIR\$env:QT_VERSION\msvc2022_64\lib\cmake"

        # Write to GithHub path too
        Write-Output "$QT_BIN_PATH" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        Write-Output "$QT_LIBEXEC_PATH" | Out-File -FilePath $env:GITHUB_PATH -Encoding utf8 -Append
        Write-Output "CMAKE_PREFIX_PATH=$CMAKE_PREFIX_PATH" >> $env:GITHUB_ENV

    - name: '⚙️ Save Qt Cache'
      if: env.QT_INSTALL_NEEDED == 'true'
      uses: actions/cache/save@v3
      with:
        path: |
          ${{github.workspace}}/Qt-${{env.QT_VERSION_WINDOWS}}-${{runner.os}}-x64
          ${{env.USERPROFILE}}/.qt-license
        key: qt-${{runner.os}}-${{env.QT_VERSION_WINDOWS}}-x64-msvc2022
      
    - name: '⚙️ Install CMake'
      uses: lukka/get-cmake@latest
      with:
        useLocalCache: true
        
    - name: '🛠 Setup MSVC Development Environment'
      uses: TheMrMilchmann/setup-msvc-dev@v3
      with:
        arch: x64
        
    - name: '🚧 Configure with CMake'
      run: |
        mkdir build
        cd build
        cmake ../ -DCMAKE_CXX_COMPILER=cl -DCMAKE_C_COMPILER=cl -DPRODUCTION_OPTIMIZATION=ON -DCMAKE_BUILD_TYPE=Release

    - name: '🚧 Build application'
      run: |
        cd build
        cmake --build . --config Release -j 16
        
    - name: '⚙️ Add msbuild to PATH'
      uses: microsoft/setup-msbuild@v2
      
    - name: '⚙️ Install WiX'
      run: dotnet tool install --global wix
        
    - name: '📦 Package application'
      run: |
        cd build
        cpack --verbose
        mv *.msi ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows-x86_64.msi
        mv ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows-x86_64.msi ../
        
    - name: '📤 Upload artifact: MSI installer'
      uses: actions/upload-artifact@v4
      with:
        name: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows-x86_64.msi
        path: ${{env.EXECUTABLE}}-${{env.VERSION}}-Windows-x86_64.msi

#-------------------------------------------------------------------------------
# Create continous release
#-------------------------------------------------------------------------------

  upload:
    name: '🗂 Create release and upload artifacts'
    needs:
      - build-mac-universal
      - build-windows-x86_64
      - build-linux-x86_64
      - build-linux-aarch64
  
    runs-on: ubuntu-latest
    env:
      RELEASE_TAG: continuous
  
    steps:
      - name: '📥 Download artifacts'
        uses: actions/download-artifact@v4
        with:
          path: ./artifacts
          merge-multiple: true
  
      - name: '🗑️ Delete previous release and tag if exists'
        run: |
          if gh release view "$RELEASE_TAG" --repo "$GITHUB_REPOSITORY" &>/dev/null; then
            echo "Release '$RELEASE_TAG' exists. Deleting..."
            gh release delete "$RELEASE_TAG" --cleanup-tag --yes --repo "$GITHUB_REPOSITORY" || echo "Failed to delete release. Ignoring."
          else
            echo "No release named '$RELEASE_TAG' found. Skipping delete."
          fi
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
  
      - name: '🔐 Generate SHA256 checksums with sizes'
        run: |
          echo "| File | SHA256 Checksum |" > release-body.md
          echo "|------|-----------------|" >> release-body.md
      
          find ./artifacts -type f \( -name "*.deb" -o -name "*.rpm" -o -name "*.AppImage" -o -name "*.dmg" -o -name "*.exe" -o -name "*.msi" \) | sort | while read -r file; do
            hash=$(sha256sum "$file" | awk '{print $1}')
            filename=$(basename "$file")
            echo "| \`$filename\` | \`$hash\` |"
          done >> release-body.md
  
      - name: '🚀 Create Release'
        uses: ncipollo/release-action@v1
        with:
          tag: ${{ env.RELEASE_TAG }}
          prerelease: true
          allowUpdates: true
          replacesArtifacts: true
          name: 'Continuous Build'
          bodyFile: release-body.md
          artifacts: |
            artifacts/*.deb,
            artifacts/*.rpm,
            artifacts/*.AppImage,
            artifacts/*.dmg,
            artifacts/*.exe,
            artifacts/*.msi
